class<T>{
    class InnerClass{
        int field = 6;
        int test(){
                return 6;
        }
    }
    int f = 6;
    static int  sf = 6;
    int fieldTest(){
        return f;
    }
    int fieldStaticTest(){
        return sf;
    }
    int fieldGetterTest(){
        return this.getF();
    }
    int nullTest(){
        String? s = null;
        if(s==null){
            s = "test";
        }
        if(s!=null) return 6;
        else return 1;
    }
    int test(){
        return 6;
    }
    int inc(){
        int i=5;
        i++;
        return i;
    }
    int ifStmt(){
        int i = 3;
        int j = 4;
        //return j;
        if(i == 3){
            j++;
            if( i < 6) j++; 
        }else{
            return 0;
        }
        return j;
    }
    
    private int ifElseIfStmt(int i){
        if(i==1){
            return 1;
        }else if(i==2){
            return 2;
        }else if(i==3){
            return 3;
        }else{
            return 0;
        }
     }
     
     int ifFirst(){ return ifElseIfStmt(1) + 5 ;}
     
    int ifSecond(){ return ifElseIfStmt(2) + 4 ;}
     
     int ifThird(){ return ifElseIfStmt(3) + 3 ;}
     
     int ifLast(){ return ifElseIfStmt(-1) + 6 ;}
     
      
    
    
    int ifBinary(){
        int i = 1;
        int j = 2;
        if(i==1 && j ==2){
            return 6;
        }else{
            return 1;
        }
    }
    int ifBinaryLogic(){
        boolean t = false;
        boolean t2 = false;
        if(!t && !t2) return 6;
        return 1;
    }
    int forStmt(){
        int j=0;
        for(int i=0;i<6;i++){
                j++;
        }
        return j;
    }
    int forStmt2(){
        int j;
        for(j=0;j<6;j++);
        return j;
    }
    int forStmtDead(){
        int i = 0;
        for(;;){
            i++;
            if(i==6) return i;
        }
        return -1;
    }
    int whileStmt(){
        int i=1;
        while(i<6) i++;
        return i;
    }
    
    int invoaction(){
        return whileStmt();
    }
    
    int not(){
        int i = -7;
        return ~i;
    }
    int tryStmt(){
        try{
            throw new Exception("6");
        }catch(Exception ex){
            return Integer.parseInt(ex.getMessage());
        }
    }
    
    int dynamicInvoke(){
        return ((Integer)this->not()).intValue();
    }
    
    int property(){
        this->f = 6;
        return this->f;
    }
            
    int genericList(){
        var list = new LinkedList<Integer>();
        list.add(6);
        //list.add("test");
        return list.get(0);
    }
    
    int genericIterator(){
        var list = new LinkedList<Integer>();
        list.add(6);
        var it = list.iterator();
        Integer i = it.next();
        return i;
    }
    
    int overrideType(){
        Object s = "test";
        if(s instanceof String){
            s.chars();
            return 6;
        }
        return 0;
    }
    
    int overrideType2(){
        List<String>? list = new ArrayList<String>();
        if(list!=null){
            list.add("testit");
            return 6;
        }
        return 0;
    }
    
    int arrayTest(){
        int[] arr = new int[]{1,2,3,4,5,6};
        return arr[5];
    }
    
    int foreachArray(){
        var arr = new int[]{4,5,6};
        int ret = 0;
        foreach(arr as a){
            ret = a;
        }
        return ret;
    }

    int foreachArrayKey(){
        int ret = 0;
        foreach([4,5,6,7] as i,v){
            ret += i;
        }
        return ret;
    }

    int foreachList(){
        var arr = new ArrayList<Integer>(3);
        arr.add(1);
        arr.add(2);
        arr.add(3);
        int ret = 0;
        foreach(arr as i,a){
            ret += a + i;
        }
        return ret - 3;
    }

    int iteratingInvoke(){
        var ints = (<Integer>[4,5,6])*.intValue();
        return ints[2];
    }


    int questionExpr(){
        return false ? 0 : 6;
    }
    
    int interpolationTest(){
        var name = "kalang";
        return "hello,{kalang}!".equals("hello,{${name}}!") ? 6 : 0 ;
    }
    
    int byteDeclTest(){
        byte b = 6;
        return b;
    }    

    int continueTest(){
        foreach([1,2] as it){
            continue;
        }
        return 6;
    }

    int ifNotEqualsIntTest(){
        int a = 1;
        if(a!=0){
            return 6;
        }
        return 0;
    }
    
    int assertStmtTest(){
        try{
            assert false : "6";
        } catch (AssertionError ex) {
            return Integer.parseInt(ex.getMessage());
        }
        return 0;
    }

    int innerClassTest(){
        return new InnerClass().test();
    }
    int innerFieldTest(){
        return new InnerClass().getField();
    }
    /*
    
    int dynamicField(){
        this->f = 6;
        return (Integer)this->f;
    }
    */
    
}