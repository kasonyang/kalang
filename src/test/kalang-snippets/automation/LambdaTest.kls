import java.util.stream.Collectors;

static class StringList extends ArrayList<String> {

}
int lambdaExprTest() {
    var cb as &String(String) = (value) => {
        return value;
    };
    return Integer.parseInt(cb.call("3")) + Integer.parseInt(cb("3"));
}

int lambdaInvokeTest() {
    val cb as &Integer() = () => {
        return lambdaExprTest();
    };
    return cb();
}

boolean consumerTest() {
    val list = Arrays.asList(<Integer>[1,2,3]);
    list.forEach(it => it.intValue());
    return true;
}

boolean compareTest() {
    val list = <Integer>[1,3,2]..asList();
    list.sort((e1,e2) => e1.compareTo(e2));
    return list.equals(<Integer>[1,2,3]..asList());
}

boolean mapTest() {
    val list = new StringList();
    list.add("test");
    val lengthList = list..map(it => it.length());
    return <Object>[4]..asList().equals(lengthList);
}

boolean nullCheck() {
    val str as String? = "test";
    val toStr as &String() = () => {
        return str == null ? "null" : str.toString();
    };
    return toStr() == "test";
}

boolean thisVarTest() {
    val that = this;
    val cb as &Boolean() = () => {
        return this === that;
    };
    return cb();
}

boolean lambdaInLambda() {
    val list = ["a"]..asList();
    val result = list..map(it => {
        return [it]..asList()..map(el => String.valueOf(el.length()));
    });
    return result.get(0).get(0).length() == 1;
}

int testSelfReference() {
    val self as &Integer(Integer) = (value) -> {
        if (value == 6) {
            return value;
        }
        return self.call(value + 1);
    };
    return self.call(3);
}

static boolean lambdaInStaticMethod() {
    return [123]..asList()..map(it => it.toString()).get(0) == "123";
}

protected String genericTypeSignature(List<?> values) {
    return values.stream().map(it => "?").collect(Collectors.joining(","));
}